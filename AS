10. GTK
sudo apt update
sudo apt install libgtk-3-dev build-essential
gcc `pkg-config --cflags gtk+-3.0` -o mygtkapp mygtkapp.c `pkg-config --libs gtk+-3.0`
./mygtkapp
#include <gtk/gtk.h>
void on_button_clicked(GtkWidget *widget, gpointer data) {
    GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(data),
                                               GTK_DIALOG_DESTROY_WITH_PARENT,
                                               GTK_MESSAGE_INFO,
                                               GTK_BUTTONS_OK,
                                               "Hello, GNOME!");
    gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);
}
int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);
    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window), "Simple GTK+ Program");
    gtk_container_set_border_width(GTK_CONTAINER(window), 10);
    gtk_widget_set_size_request(window, 200, 100);
    g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
    GtkWidget *button = gtk_button_new_with_label("Click Me");
    g_signal_connect(button, "clicked", G_CALLBACK(on_button_clicked), window);
    gtk_container_add(GTK_CONTAINER(window), button);
    gtk_widget_show_all(window);
    gtk_main();
    return 0;
}
===================================================================================================================================
9b. Client / Server - shared mem
client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#define SHM_SIZE 1024
int main() {
    key_t key = ftok("/tmp", 'A');
    int shmid = shmget(key, SHM_SIZE, 0666);
    char *shm_ptr = shmat(shmid, NULL, 0);
    printf("Client: Sending message to server...\n");
    strncpy(shm_ptr, "Hello from client", SHM_SIZE);
    while (*shm_ptr == '\0');
    printf("Client: Received response from server: %s\n", shm_ptr);
    shmdt(shm_ptr);
    return 0;
}
server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#define SHM_SIZE 1024
int main() {
    key_t key = ftok("/tmp", 'A');
    int shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    char *shm_ptr = shmat(shmid, NULL, 0);
    printf("Server: Waiting for client message...\n");
    while (*shm_ptr == '\0');
    printf("Server: Received message from client: %s\n", shm_ptr);
    strncpy(shm_ptr, "Hello from server", SHM_SIZE);
    shmdt(shm_ptr);
    shmctl(shmid, IPC_RMID, NULL);
    return 0;
}
--------------
9a. client & server - socket:
client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sock = 0;
    struct sockaddr_in server_address;
    char buffer[BUFFER_SIZE] = {0};
    const char *message = "Hello from client";

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(PORT);
    if (inet_pton(AF_INET, "127.0.0.1", &server_address.sin_addr) <= 0) {
        perror("inet_pton failed");
        exit(EXIT_FAILURE);
    }
    if (connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        perror("connect failed");
        exit(EXIT_FAILURE);
    }
    send(sock, message, strlen(message), 0);
    printf("Message sent to server\n");
    read(sock, buffer, BUFFER_SIZE);
    printf("Server: %s\n", buffer);
    return 0;
}
server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080
#define BUFFER_SIZE 1024
int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};
    const char *message = "Hello from server";
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, 3) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }
    printf("Server listening on port %d...\n", PORT);
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("accept failed");
        exit(EXIT_FAILURE);
    }
    read(new_socket, buffer, BUFFER_SIZE);
    printf("Client: %s\n", buffer);
    send(new_socket, message, strlen(message), 0);
    printf("Message sent to client\n");
    return 0;
}
============================================================================================================================================================
8. Process attributes and usage of forks 
1.
#!/bin/bash 
echo "Process ID (PID): $$" 
echo "Parent Process ID (PPID): $PPID" 
echo "User ID (UID): $UID" 
echo "Group ID (GID): $GROUPS" 
2. fork => & 
#!/bin/bash 
echo "Parent ID (PID): $$" 
child_process(){ 
echo "Child Process ID (PID): $$ " 
} 
child_process & 
wait 
echo "Parent Process Exits"
3. fork => ():
#include <stdio.h>
#include <unistd.h>
int main() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("fork failed");
        return 1;
    } else if (pid == 0) {
        printf("Child PID: %d\n", getpid());
    } else {
        printf("Parent PID: %d\nChild PID: %d\n", getpid(), pid);
    }
    return 0;
}
pipes => ls -l | grep "file.txt"
named pipes => mkfifo myp , ls -l myp , cat < myp
============================================================================================================================================================
7.a => awk
default behavior : awk '{print}' file.txt
print match lines : awk '/manager/ {print}' file.txt
---
NR(number of input records) => awk '{print NR,$0}' employee.txt   ,   awk 'NR==3, NR==6 {print NR, $1}' employee.txt
NF(field separator character) => awk '{print $0,$NF}' employee.txt  
FS(Field Separator) => awk 'BEGIN {FS=":"} {print $1, $2}' employee.txt
RS(Record Separator) => awk 'BEGIN {RS=""} {print "Record:", $0}' file.txt   ,   awk 'BEGIN {RS=":"} {print "Record:", $0; print "-----"}' records.txt
OFS(Output Field Separator) => awk 'BEGIN {OFS=" | "} {print $1, $2, $3}' employee.txt
ORS(Output Record Separator) => awk 'BEGIN {ORS="---\n"} {print $0}' employee.txt
---
 awk 'length($0)<25 {print $0}' employee.txt 
 awk '{if (length($0)>max) max = length($0)} END {print max}' employee.txt
 awk 'END {print NR}' employee.txt
7.b file.awk
#!/usr/bin/awk -f  
BEGIN { 
FS="," 
} 
NR == 1 { 
next 
} 
{ 
print "Name: " $1 ", Department: " $3 
}

data.csv 
cat data.csv
Name,RollNo,Department,CGPA
Anjali,CS101,Computer Science,8.7
Ravi,EC102,Electronics,7.9
Meena,ME103,Mechanical,8.2
Vikram,CS104,Computer Science,9.1
Farah,EE105,Electrical,7.5
Arjun,ME106,Mechanical,8.4
Divya,EC107,Electronics,8.0
Suresh,EE108,Electrical,6.9
./file/awk data.csv
Name: Anjali, Department: Computer
Name: Ravi, Department: Electronics .....
============================================================================================================================================================
6. I/O redirections and command substitutions:
I/O redirection:
1. Writing Output to a File: echo "hello" > file.txt
2. Appending Output to a File: echo "hello" >> file.txt
3. Writing Error Messages to a File: cd /dev/null 2> error.txt
4. Redirecting Both stdout and stderr: bash fibonacci.sh &> op_err.txt
5.  Reading Input from a File: cat file.txt > input.txt
6. Piping Output to Another Command: 
hereDoc.sh
#!/bin/bash
cat<<EOF 
HEllo world
Hello All
EOF
$ bash hereDoc.sh
CMD substitution :
cmdsub.sh
c_date = `date` or $(date)
echo "Today's date is : $c_date"
---
run => bash cmdsub.sh
============================================================================================================================================================
5. bash scripts
1. greatest of 3 numbers:
echo "Enter 3 numbers:" 
read a 
read b 
read c 
if [ $a -gt $b ] && [ $a -gt $c ] 
then 
echo "$a is greater" 
elif [ $b-gt $a ] && [ $b -gt $c ] 
then 
echo "$b is greater" 
else 
echo "$c is greater" 
fi 
2.odd / even
echo "Enter a number:" 
read a 
if [ $(($a % 2)) -eq 0 ]; 
then echo "$a is even"; 
else echo "$a is odd"; 
fi 
3.sum of n numbers:
echo "ENTER A NUMBER" 
read n 
su=0 
i=0 
while [ $i -lt $n ] 
do 
echo "enter number" 
read a 
su=$((su+a)) 
i=$((i+1)) 
done 
echo "the sum is $su" 
4.fibonacci series
echo "Enter a number:‚Äù 
read n 
i=3 
n1=0 
n2=1 
echo "$n1" 
echo "$n2" 
while [ $i -le $n ] 
do 
n3=$((n1+n2)) 
echo "$n3" 
n1=$n2 
n2=$n3 
i=$((i+1)) 
done
5.factorial
echo "enter a number:" 
read a 
fact=1 
while [ $a -gt 1 ] do 
fact=$((fact * a)) 
a=$((a-1)) done 
echo "the factorial is $fact" 
============================================================================================================================================================
4. SED , GREP, EGREP , FGREP
SED :
1. substitution : sed 's/line/text/' text.txt
2. deletion : sed '/2/d' text.txt
3. print 
3.1 : print specific line : sed -n '1,5p' text.txt
3.2 : line with word a : sed -n '/a/p' text.txt
3.3 print portion : sed -n 's[0-9]\+/NUM/p' text.txt  , sed -n '5,6p' text.txt  , sed 'p' text.txt
-- 
GREP :
1. Search for a Pattern in a File:  grep "p" text.txt
2. Regular Expressions: grep "^?*.a*" text.txt
3. grep "^?*.a*|*.*a$" text.txt
--
EGREP : 
1. Search for a Pattern in a File: egrep '*a$' text.txt
2. Extended Regular Expressions: egrep "pattern1|pattern2" filename.txt   , egrep '^\a.*|*a$' text.txt
--
FGREP : 
1. Fixed String Search: fgrep "al" text.txt
2. Performance Optimization: fgrep -F "beta" text.txt
____
Options : 
Case Insensitive Search (-i)  ,  Display Line Numbers (-n) , Invert Match (-v) , Count Matching Lines Only (-c)
=========================================================================================================
3. ZIPPING  & UNZIPPING 
ZIP : -r  , -q , -9  , -u
1. zip file.zip file.txt
2. zip file.zip file.txt file2.txt file3.txt
3. zip -r compressed_directory.zip directory_to_compress : zip -r srec.zip srec
--
UNZIP : -d , -l , -q , -o , -P , -u
1. unzip compressed_file.zip
2. unzip compressed_file.zip -d destination_directory
========================================================================
2.  File MAnagement and text processing:
File management :  pwd  ,  ls  ,  cd  ,  mkdir  ,  rm  ,  cp  ,  mv  ,  touch
Text processing : cat  ,  grep  ,  sed  ,  sort  ,  uniq  ,  awk 
=========================================================
1. commands
man , uname , chmod , pwd , cd , ls , history , clear , grep , sudo , apt-get , rmdir , rm , mkdir , mv , sort , echo , cat , more , wc , head , tail , whoami , uniq , time , date , cal , nl (number of line) , touch , 
